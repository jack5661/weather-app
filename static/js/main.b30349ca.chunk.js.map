{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","city","searchWeather","bind","inputCity","handleSubmit","renderWeather","event","this","setState","target","value","fetch","process","mode","info","json","weather","console","log","main","desc","description","icon","temp","Math","round","windSpeed","wind","speed","background","name","preventDefault","document","body","style","id","src","onSubmit","placeholder","type","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4SAuFeA,G,wDAlFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,aAER,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,cAAgB,EAAKA,cAAcH,KAAnB,gBAErB,EAAKD,gBACL,EAAKI,gBAXY,E,sDAcTC,GACRC,KAAKC,SAAS,CACZR,KAAMM,EAAMG,OAAOC,U,iLAMAC,MAAM,qDAAD,OAAsDJ,KAAKR,MAAMC,KAAjE,kBAA+EY,oCAAiC,CAACC,KAAM,S,cAAzIC,E,gBACgBA,EAAKC,O,OAArBC,E,OACNC,QAAQC,IAAIX,KAAKR,MAAMC,MACvBO,KAAKC,SAAS,CACZR,KAAMO,KAAKR,MAAMC,KACjBgB,QAASA,EAAQA,QAAQ,GAAGG,KAC5BC,KAAMJ,EAAQA,QAAQ,GAAGK,YACzBC,KAAK,qCAAD,OAAuCN,EAAQA,QAAQ,GAAGM,KAA1D,QACJC,KAAMC,KAAKC,MAAMT,EAAQG,KAAKI,KAAO,QACrCG,UAAWV,EAAQW,KAAKC,MACxBC,WAAW,8CAAD,OAAgDtB,KAAKR,MAAMC,KAA3D,QAEZiB,QAAQC,IAAIX,KAAKR,O,kDAEjBkB,QAAQC,IAAI,KAAIY,MAChBvB,KAAKC,SAAS,CACZR,KAAM,mBACNgB,QAAS,gBACTI,KAAM,iBACNE,KAAM,4CACNC,KAAM,EACNG,UAAW,EACXG,WAAW,gC,mJAKJvB,GACXA,EAAMyB,iBACNxB,KAAKN,gBACLM,KAAKF,kB,sCAKL,OADA2B,SAASC,KAAKC,MAAML,WAAatB,KAAKR,MAAM8B,WAE1C,yBAAKM,GAAK,WACN,2CAAiB5B,KAAKR,MAAMC,MAC5B,yBAAKoC,IAAO7B,KAAKR,MAAMuB,OACvB,4BAAKf,KAAKR,MAAMiB,SAChB,4BAAKT,KAAKR,MAAMqB,MAChB,4BAAKb,KAAKR,MAAMwB,KAAhB,e,+BAMN,OACE,yBAAKY,GAAK,OACR,0BAAMA,GAAK,OAAOE,SAAY9B,KAAKH,cACjC,2BAAOkC,YAAc,uBAAuBC,KAAO,OAAOC,SAAYjC,KAAKJ,YAC3E,4BAAQoC,KAAO,UAAf,WAEDhC,KAAKF,qB,GA5EIoC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.b30349ca.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: \"Vancouver\",\n    };\n    this.searchWeather = this.searchWeather.bind(this);\n    this.inputCity = this.inputCity.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.renderWeather = this.renderWeather.bind(this);\n\n    this.searchWeather();\n    this.renderWeather();\n  }\n\n  inputCity(event) {\n    this.setState({\n      city: event.target.value,\n    });\n  }\n\n  async searchWeather() {\n    try {\n      const info = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=${process.env.REACT_APP_API_KEY}`, {mode: \"cors\",});\n      const weather = await info.json();\n      console.log(this.state.city);\n      this.setState({\n        city: this.state.city,\n        weather: weather.weather[0].main,\n        desc: weather.weather[0].description,\n        icon: `https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`,\n        temp: Math.round(weather.main.temp - 273.15),\n        windSpeed: weather.wind.speed, \n        background: `url(\"https://source.unsplash.com/1600x900/?${this.state.city}\")`,\n      });\n      console.log(this.state);\n    } catch(err) {\n      console.log(err.name);\n      this.setState({\n        city: \"Cannot Find City\",\n        weather: \"Hopefully Sun\",\n        desc: \"Something Nice\",\n        icon: \"https://openweathermap.org/img/wn/01n.png\",\n        temp: 0,\n        windSpeed: 0,\n        background: `linear-gradient(#CFF, #FCC)`,\n      });\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.searchWeather();\n    this.renderWeather();\n  }\n\n  renderWeather() {\n    document.body.style.background = this.state.background;\n    return(\n      <div id = \"Weather\">\n          <h1>Weather in: {this.state.city}</h1>\n          <img src = {this.state.icon}/>\n          <h2>{this.state.weather}</h2>\n          <h3>{this.state.desc}</h3>\n          <h2>{this.state.temp} Celsius</h2>\n      </div>\n    );\n  }\n  \n  render() {\n    return (\n      <div id = \"box\">\n        <form id = \"FORM\" onSubmit = {this.handleSubmit}>\n          <input placeholder = \"Enter City to Search\" type = \"text\" onChange = {this.inputCity}/>\n          <button type = \"submit\">Search</button>\n        </form>\n        {this.renderWeather()}\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}